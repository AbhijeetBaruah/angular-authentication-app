import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
  HttpErrorResponse,
  HttpResponse
} from '@angular/common/http';
import { Observable, of, throwError } from 'rxjs';
import { Router } from '@angular/router';
import { LoginData } from './login/loginData';


@Injectable({
  providedIn:'root'
})
export class MockInterceptor implements HttpInterceptor {

  
  constructor(private route:Router) {}

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    
    if(request.url.endsWith('/api/login') && request.method.toLowerCase() == 'post'){
      let credential:LoginData;
      credential = request.body as LoginData;
      console.log('after : '+credential);

      if(credential.username == 'abhijeet' && credential.password == 'password'){
        let token1:string="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFiaGlqZWV0IiwicGFzc3dvcmQiOiJwYXNzd29yZCIsImFkbWluIjpmYWxzZX0.RQ47cAnt1Dc-l69KrC-AEqfLiKw_sPP23n8ziit3-W8";
        return of(new HttpResponse({ status: 200, body: {token:token1}}));
      }
      else if(credential.username == 'admin' && credential.password == 'admin'){
        let token2:string = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsImFkbWluIjp0cnVlfQ.PMin9eADkrYLqiKbV0lbYY_-LjHYYunvKDdMDjYqU30";
        return of(new HttpResponse({ status: 200, body: {token:token2}}));
      }
      else{
        throw new HttpErrorResponse({status:400});
      } 
      //throw new HttpErrorResponse({status:400,url:'admin'});
    }

    if(request.url.endsWith('/api/orders') && request.method.toLowerCase()=="get"){
      //this token is generated by backend
      let token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsImFkbWluIjp0cnVlfQ.PMin9eADkrYLqiKbV0lbYY_-LjHYYunvKDdMDjYqU30'
      if(request.headers.get('Authorization') === 'Bearer '+token){
        return of(new HttpResponse({   status:200, body:[1,2,3]    }));
      }else{
        throw new HttpErrorResponse({ status:400 });
      }

    }
    return next.handle(request);
  }
}
